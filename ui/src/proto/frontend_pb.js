// source: proto/frontend.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.frontendPackage.ChartDatasetRequest', null, global);
goog.exportSymbol('proto.frontendPackage.ChartDatasetResponse', null, global);
goog.exportSymbol('proto.frontendPackage.DeviceData', null, global);
goog.exportSymbol('proto.frontendPackage.Error', null, global);
goog.exportSymbol('proto.frontendPackage.StationHelperArray', null, global);
goog.exportSymbol('proto.frontendPackage.TestResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frontendPackage.ChartDatasetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.frontendPackage.ChartDatasetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frontendPackage.ChartDatasetRequest.displayName = 'proto.frontendPackage.ChartDatasetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frontendPackage.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.frontendPackage.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frontendPackage.Error.displayName = 'proto.frontendPackage.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frontendPackage.DeviceData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.frontendPackage.DeviceData.repeatedFields_, null);
};
goog.inherits(proto.frontendPackage.DeviceData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frontendPackage.DeviceData.displayName = 'proto.frontendPackage.DeviceData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frontendPackage.ChartDatasetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.frontendPackage.ChartDatasetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frontendPackage.ChartDatasetResponse.displayName = 'proto.frontendPackage.ChartDatasetResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frontendPackage.TestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.frontendPackage.TestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frontendPackage.TestResponse.displayName = 'proto.frontendPackage.TestResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frontendPackage.StationHelperArray = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.frontendPackage.StationHelperArray, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frontendPackage.StationHelperArray.displayName = 'proto.frontendPackage.StationHelperArray';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frontendPackage.ChartDatasetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.frontendPackage.ChartDatasetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frontendPackage.ChartDatasetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frontendPackage.ChartDatasetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    chartId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frontendPackage.ChartDatasetRequest}
 */
proto.frontendPackage.ChartDatasetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frontendPackage.ChartDatasetRequest;
  return proto.frontendPackage.ChartDatasetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frontendPackage.ChartDatasetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frontendPackage.ChartDatasetRequest}
 */
proto.frontendPackage.ChartDatasetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChartId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frontendPackage.ChartDatasetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frontendPackage.ChartDatasetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frontendPackage.ChartDatasetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frontendPackage.ChartDatasetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChartId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 chart_id = 1;
 * @return {number}
 */
proto.frontendPackage.ChartDatasetRequest.prototype.getChartId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.frontendPackage.ChartDatasetRequest} returns this
 */
proto.frontendPackage.ChartDatasetRequest.prototype.setChartId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frontendPackage.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.frontendPackage.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frontendPackage.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frontendPackage.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    priority: jspb.Message.getFieldWithDefault(msg, 2, ""),
    kind: jspb.Message.getFieldWithDefault(msg, 3, ""),
    date: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frontendPackage.Error}
 */
proto.frontendPackage.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frontendPackage.Error;
  return proto.frontendPackage.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frontendPackage.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frontendPackage.Error}
 */
proto.frontendPackage.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriority(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKind(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frontendPackage.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frontendPackage.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frontendPackage.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frontendPackage.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPriority();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKind();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.frontendPackage.Error.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.frontendPackage.Error} returns this
 */
proto.frontendPackage.Error.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string priority = 2;
 * @return {string}
 */
proto.frontendPackage.Error.prototype.getPriority = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.frontendPackage.Error} returns this
 */
proto.frontendPackage.Error.prototype.setPriority = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string kind = 3;
 * @return {string}
 */
proto.frontendPackage.Error.prototype.getKind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.frontendPackage.Error} returns this
 */
proto.frontendPackage.Error.prototype.setKind = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string date = 4;
 * @return {string}
 */
proto.frontendPackage.Error.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.frontendPackage.Error} returns this
 */
proto.frontendPackage.Error.prototype.setDate = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.frontendPackage.DeviceData.repeatedFields_ = [5,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frontendPackage.DeviceData.prototype.toObject = function(opt_includeInstance) {
  return proto.frontendPackage.DeviceData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frontendPackage.DeviceData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frontendPackage.DeviceData.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isactive: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    isusable: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    classes: jspb.Message.getFieldWithDefault(msg, 4, ""),
    errorsList: jspb.Message.toObjectList(msg.getErrorsList(),
    proto.frontendPackage.Error.toObject, includeInstance),
    location: jspb.Message.getFieldWithDefault(msg, 6, ""),
    staff: jspb.Message.getFieldWithDefault(msg, 7, ""),
    depot: jspb.Message.getFieldWithDefault(msg, 8, ""),
    ensembleList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
    runtimecurrent: jspb.Message.getFieldWithDefault(msg, 10, 0),
    runtimemaintenance: jspb.Message.getFieldWithDefault(msg, 11, 0),
    runtimetotal: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frontendPackage.DeviceData}
 */
proto.frontendPackage.DeviceData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frontendPackage.DeviceData;
  return proto.frontendPackage.DeviceData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frontendPackage.DeviceData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frontendPackage.DeviceData}
 */
proto.frontendPackage.DeviceData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsactive(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsusable(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClasses(value);
      break;
    case 5:
      var value = new proto.frontendPackage.Error;
      reader.readMessage(value,proto.frontendPackage.Error.deserializeBinaryFromReader);
      msg.addErrors(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setStaff(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDepot(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addEnsemble(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRuntimecurrent(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRuntimemaintenance(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRuntimetotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frontendPackage.DeviceData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frontendPackage.DeviceData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frontendPackage.DeviceData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frontendPackage.DeviceData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsactive();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getIsusable();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getClasses();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.frontendPackage.Error.serializeBinaryToWriter
    );
  }
  f = message.getLocation();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getStaff();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDepot();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getEnsembleList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getRuntimecurrent();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getRuntimemaintenance();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getRuntimetotal();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.frontendPackage.DeviceData.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.frontendPackage.DeviceData} returns this
 */
proto.frontendPackage.DeviceData.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool isActive = 2;
 * @return {boolean}
 */
proto.frontendPackage.DeviceData.prototype.getIsactive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.frontendPackage.DeviceData} returns this
 */
proto.frontendPackage.DeviceData.prototype.setIsactive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool isUsable = 3;
 * @return {boolean}
 */
proto.frontendPackage.DeviceData.prototype.getIsusable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.frontendPackage.DeviceData} returns this
 */
proto.frontendPackage.DeviceData.prototype.setIsusable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string classes = 4;
 * @return {string}
 */
proto.frontendPackage.DeviceData.prototype.getClasses = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.frontendPackage.DeviceData} returns this
 */
proto.frontendPackage.DeviceData.prototype.setClasses = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Error errors = 5;
 * @return {!Array<!proto.frontendPackage.Error>}
 */
proto.frontendPackage.DeviceData.prototype.getErrorsList = function() {
  return /** @type{!Array<!proto.frontendPackage.Error>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.frontendPackage.Error, 5));
};


/**
 * @param {!Array<!proto.frontendPackage.Error>} value
 * @return {!proto.frontendPackage.DeviceData} returns this
*/
proto.frontendPackage.DeviceData.prototype.setErrorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.frontendPackage.Error=} opt_value
 * @param {number=} opt_index
 * @return {!proto.frontendPackage.Error}
 */
proto.frontendPackage.DeviceData.prototype.addErrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.frontendPackage.Error, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.frontendPackage.DeviceData} returns this
 */
proto.frontendPackage.DeviceData.prototype.clearErrorsList = function() {
  return this.setErrorsList([]);
};


/**
 * optional string location = 6;
 * @return {string}
 */
proto.frontendPackage.DeviceData.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.frontendPackage.DeviceData} returns this
 */
proto.frontendPackage.DeviceData.prototype.setLocation = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string staff = 7;
 * @return {string}
 */
proto.frontendPackage.DeviceData.prototype.getStaff = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.frontendPackage.DeviceData} returns this
 */
proto.frontendPackage.DeviceData.prototype.setStaff = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string depot = 8;
 * @return {string}
 */
proto.frontendPackage.DeviceData.prototype.getDepot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.frontendPackage.DeviceData} returns this
 */
proto.frontendPackage.DeviceData.prototype.setDepot = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * repeated string ensemble = 9;
 * @return {!Array<string>}
 */
proto.frontendPackage.DeviceData.prototype.getEnsembleList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.frontendPackage.DeviceData} returns this
 */
proto.frontendPackage.DeviceData.prototype.setEnsembleList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.frontendPackage.DeviceData} returns this
 */
proto.frontendPackage.DeviceData.prototype.addEnsemble = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.frontendPackage.DeviceData} returns this
 */
proto.frontendPackage.DeviceData.prototype.clearEnsembleList = function() {
  return this.setEnsembleList([]);
};


/**
 * optional int32 runtimeCurrent = 10;
 * @return {number}
 */
proto.frontendPackage.DeviceData.prototype.getRuntimecurrent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.frontendPackage.DeviceData} returns this
 */
proto.frontendPackage.DeviceData.prototype.setRuntimecurrent = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 runtimeMaintenance = 11;
 * @return {number}
 */
proto.frontendPackage.DeviceData.prototype.getRuntimemaintenance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.frontendPackage.DeviceData} returns this
 */
proto.frontendPackage.DeviceData.prototype.setRuntimemaintenance = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 runtimeTotal = 12;
 * @return {number}
 */
proto.frontendPackage.DeviceData.prototype.getRuntimetotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.frontendPackage.DeviceData} returns this
 */
proto.frontendPackage.DeviceData.prototype.setRuntimetotal = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frontendPackage.ChartDatasetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.frontendPackage.ChartDatasetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frontendPackage.ChartDatasetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frontendPackage.ChartDatasetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicedata: (f = msg.getDevicedata()) && proto.frontendPackage.DeviceData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frontendPackage.ChartDatasetResponse}
 */
proto.frontendPackage.ChartDatasetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frontendPackage.ChartDatasetResponse;
  return proto.frontendPackage.ChartDatasetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frontendPackage.ChartDatasetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frontendPackage.ChartDatasetResponse}
 */
proto.frontendPackage.ChartDatasetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.frontendPackage.DeviceData;
      reader.readMessage(value,proto.frontendPackage.DeviceData.deserializeBinaryFromReader);
      msg.setDevicedata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frontendPackage.ChartDatasetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frontendPackage.ChartDatasetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frontendPackage.ChartDatasetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frontendPackage.ChartDatasetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicedata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.frontendPackage.DeviceData.serializeBinaryToWriter
    );
  }
};


/**
 * optional DeviceData DeviceData = 1;
 * @return {?proto.frontendPackage.DeviceData}
 */
proto.frontendPackage.ChartDatasetResponse.prototype.getDevicedata = function() {
  return /** @type{?proto.frontendPackage.DeviceData} */ (
    jspb.Message.getWrapperField(this, proto.frontendPackage.DeviceData, 1));
};


/**
 * @param {?proto.frontendPackage.DeviceData|undefined} value
 * @return {!proto.frontendPackage.ChartDatasetResponse} returns this
*/
proto.frontendPackage.ChartDatasetResponse.prototype.setDevicedata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.frontendPackage.ChartDatasetResponse} returns this
 */
proto.frontendPackage.ChartDatasetResponse.prototype.clearDevicedata = function() {
  return this.setDevicedata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.frontendPackage.ChartDatasetResponse.prototype.hasDevicedata = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frontendPackage.TestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.frontendPackage.TestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frontendPackage.TestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frontendPackage.TestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    hello: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frontendPackage.TestResponse}
 */
proto.frontendPackage.TestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frontendPackage.TestResponse;
  return proto.frontendPackage.TestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frontendPackage.TestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frontendPackage.TestResponse}
 */
proto.frontendPackage.TestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHello(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frontendPackage.TestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frontendPackage.TestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frontendPackage.TestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frontendPackage.TestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHello();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string hello = 1;
 * @return {string}
 */
proto.frontendPackage.TestResponse.prototype.getHello = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.frontendPackage.TestResponse} returns this
 */
proto.frontendPackage.TestResponse.prototype.setHello = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frontendPackage.StationHelperArray.prototype.toObject = function(opt_includeInstance) {
  return proto.frontendPackage.StationHelperArray.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frontendPackage.StationHelperArray} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frontendPackage.StationHelperArray.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pb_short: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frontendPackage.StationHelperArray}
 */
proto.frontendPackage.StationHelperArray.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frontendPackage.StationHelperArray;
  return proto.frontendPackage.StationHelperArray.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frontendPackage.StationHelperArray} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frontendPackage.StationHelperArray}
 */
proto.frontendPackage.StationHelperArray.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setShort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frontendPackage.StationHelperArray.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frontendPackage.StationHelperArray.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frontendPackage.StationHelperArray} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frontendPackage.StationHelperArray.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShort();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.frontendPackage.StationHelperArray.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.frontendPackage.StationHelperArray} returns this
 */
proto.frontendPackage.StationHelperArray.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string short = 2;
 * @return {string}
 */
proto.frontendPackage.StationHelperArray.prototype.getShort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.frontendPackage.StationHelperArray} returns this
 */
proto.frontendPackage.StationHelperArray.prototype.setShort = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.frontendPackage);
